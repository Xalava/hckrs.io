
// In this file we define database collections.
// The database that meteor is using have no scheme.
// We write down the structure of the collections in the comments below.


// Meteor.users is a collection that is already defined by meteor.
// We only specify an outline of the properties here.
/* 
  Meteor.users = new Meteor.Collection('users'); 
*/
/*
{
  _id: String,            // automatic generated by meteor
  createdAt: Date,        // automatic filled in by meteor

  profile: {              // user's public profile (visible for other users)
    picture: String,      // url of an avatar for this user
    name: String,         // full name of the user    
    email: String,        // e-mailadress
    lang: String,         // language: (en|nl|nl|fr)?
    location: {
      lat: Number,        // latitude
      lng: Number         // longitude
    },
    homepage: String,     // external website of user 
    hacking: [ String ],  // array of types: (websites|apps|software|design|life|hardware)*
    social: {
      facebook: String,   // url to user's facebook profile
      github: String,     // url to user's github profile
      twitter: String     // url to user's twitter profile
    },
    socialPicture: {
      facebook: String,   // url to user's facebook picture
      github: String,     // url to user's github picture
      twitter: String     // url to user's twitter picture
    },
    skills: [ String ],           // array of skill name
    favoriteSkills: [ String ]    // skills that are also marked as favorite
  },

  emails: [ {             // user can have multiple e-mailaddressen (internal use only)
    address: String,      // e-mailadress
    verified: Bool        // e-mailadress is verified by clicking the link in enrollment mail
  } ], 

  services: {             // meteor stores login information here...
    resume: ...
    facebook: ...
    github: ...
    twitter: ...
  }
}
*/



// In the future we can define new collections below
// ....



/*
  LOCAL COLLECTIONS

  This are collections that only exist on the client and will not
  be synced with the server. This collections are used to store session state.
  Instead yoy can using the Session object provided by meteor, but the local collections
  allow you to query/modify the data in an easy way.
*/


// Dynamic classes are used to define additional classes to HTML elements.
// Adding a class to an element can be done by calling the addDynamicClass() helper function.
// In general this approach is easier than setting classes directly through jquery, because
// this method preserve the classNames on the elements when the template render again.
DynamicClasses = new Meteor.Collection(null); //local collection only (session)
/*
{
  _id: String,          // automatic generated by meteor
  elementId: String,    // the id of a html element
  className: String     // the class name that are attached to this html element
}
*/

