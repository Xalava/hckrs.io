



// In this file we define database collections.
// The database that meteor is using have no scheme.
// We write down the structure of the collections in the comments below.





/* INVITATIONS */

// Invitations is a collection that contains signup invitation codes
// new users must have such code in order to signup

Invitations = new Meteor.Collection('invitations');

var invitation = { /* scheme */
  _id: String,            // automatic generated by meteor
  broadcastUser: String,  // user that is permitted to distribute this code
  receivingUser: String,  // new user that used this code to signup
  signedupAt: Date,       // date when the receiving user has signed up
}







/* MIGRATIONS */

// database migrations on deploying new app versions
// When changing the model the existing database must fit the new model
// After running the migration the data should be up to date.
// This collection stores the already processed migrations

Migrations = new Meteor.Collection('migrations');

var migration = { /* scheme */
  _id: String,         // automatic generated by meteor
  processedAt: Date,   // The date this migration is processed
  name: String,        // the name of the migration
  status: String,      // processing status (inProgress|done) 
}





/*
  CLIENT ONLY collections

  This are collections that only exist on the client and will not
  be synced with the server. This collections are used to store session state.
  Instead yoy can using the Session object provided by meteor, but the local collections
  allow you to query/modify the data in an easy way.
*/

if (Meteor.isClient) {


  /* nothing */

}



