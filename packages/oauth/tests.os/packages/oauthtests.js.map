{"version":3,"file":"/packages/oauth:tests.js","sources":["oauth/oauth_tests.js"],"names":[],"mappings":";;;;;;;;AAAA,0E;AACA,oC;;AAEA,oD;AACA,iC;AACA,4D;;AAEA,6D;AACA,iE;AACA,iC;AACA,gD;AACA,4C;AACA,G;;AAEA,iF;AACA,oC;;AAEA,gE;AACA,iC;AACA,4D;;AAEA,6D;AACA,iE;AACA,wC;AACA,4C;AACA,gD;AACA,8C;AACA,4C;AACA,uC;AACA,G;;AAEA,mF;AACA,yB;AACA,2B;AACA,8C;AACA,K;AACA,2B;AACA,mD;AACA,K;AACA,G;;AAEA,iF;AACA,wB;AACA,yB;AACA,2C;AACA,4B;AACA,8C;AACA,6D;AACA,G;;AAEA,a;AACA,yD;AACA,mB;AACA,0B;AACA,2B;AACA,6B;AACA,qD;AACA,iE;AACA,oE;AACA,G;AACA,E","sourcesContent":["Tinytest.add(\"oauth - pendingCredential handles Errors\", function (test) {\n  var credentialToken = Random.id();\n\n  var testError = new Error(\"This is a test error\");\n  testError.stack = 'test stack';\n  OAuth._storePendingCredential(credentialToken, testError);\n\n  // Test that the result for the token is the expected error\n  var result = OAuth._retrievePendingCredential(credentialToken);\n  test.instanceOf(result, Error);\n  test.equal(result.message, testError.message);\n  test.equal(result.stack, testError.stack);\n});\n\nTinytest.add(\"oauth - pendingCredential handles Meteor.Errors\", function (test) {\n  var credentialToken = Random.id();\n\n  var testError = new Meteor.Error(401, \"This is a test error\");\n  testError.stack = 'test stack';\n  OAuth._storePendingCredential(credentialToken, testError);\n\n  // Test that the result for the token is the expected error\n  var result = OAuth._retrievePendingCredential(credentialToken);\n  test.instanceOf(result, Meteor.Error);\n  test.equal(result.error, testError.error);\n  test.equal(result.message, testError.message);\n  test.equal(result.reason, testError.reason);\n  test.equal(result.stack, testError.stack);\n  test.isUndefined(result.meteorError);\n});\n\nTinytest.add(\"oauth - null, undefined key for pendingCredential\", function (test) {\n  var cred = Random.id();\n  test.throws(function () {\n    OAuth._storePendingCredential(null, cred);\n  });\n  test.throws(function () {\n    OAuth._storePendingCredential(undefined, cred);\n  });\n});\n\nTinytest.add(\"oauth - pendingCredential handles duplicate key\", function (test) {\n  var key = Random.id();\n  var cred = Random.id();\n  OAuth._storePendingCredential(key, cred);\n  var newCred = Random.id();\n  OAuth._storePendingCredential(key, newCred);\n  test.equal(OAuth._retrievePendingCredential(key), newCred);\n});\n\nTinytest.add(\n  \"oauth - pendingCredential requires credential secret\",\n  function (test) {\n    var key = Random.id();\n    var cred = Random.id();\n    var secret = Random.id();\n    OAuth._storePendingCredential(key, cred, secret);\n    test.equal(OAuth._retrievePendingCredential(key), undefined);\n    test.equal(OAuth._retrievePendingCredential(key, secret), cred);\n  }\n);\n"]}